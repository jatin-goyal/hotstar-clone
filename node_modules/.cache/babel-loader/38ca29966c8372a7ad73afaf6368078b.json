{"ast":null,"code":"import _toConsumableArray from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nvar StorageError = /*#__PURE__*/function (_FirebaseError) {\n  _inherits(StorageError, _FirebaseError);\n\n  var _super = _createSuper(StorageError);\n\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  function StorageError(code, message) {\n    var _this;\n\n    _classCallCheck(this, StorageError);\n\n    _this = _super.call(this, prependCode(code), \"Firebase Storage: \".concat(message, \" (\").concat(prependCode(code), \")\"));\n    /**\r\n     * Stores custom error data unque to StorageError.\r\n     */\n\n    _this.customData = {\n      serverResponse: null\n    };\n    _this._baseMessage = _this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), StorageError.prototype);\n    return _this;\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n\n\n  _createClass(StorageError, [{\n    key: \"_codeEquals\",\n    value: function _codeEquals(code) {\n      return prependCode(code) === this.code;\n    }\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\n\n  }, {\n    key: \"serverResponse\",\n    get: function get() {\n      return this.customData.serverResponse;\n    },\n    set: function set(serverResponse) {\n      this.customData.serverResponse = serverResponse;\n\n      if (this.customData.serverResponse) {\n        this.message = \"\".concat(this._baseMessage, \"\\n\").concat(this.customData.serverResponse);\n      } else {\n        this.message = this._baseMessage;\n      }\n    }\n  }]);\n\n  return StorageError;\n}(FirebaseError);\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(\"unknown\"\n  /* UNKNOWN */\n  , message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(\"object-not-found\"\n  /* OBJECT_NOT_FOUND */\n  , \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(\"quota-exceeded\"\n  /* QUOTA_EXCEEDED */\n  , \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(\"unauthenticated\"\n  /* UNAUTHENTICATED */\n  , message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(\"unauthorized-app\"\n  /* UNAUTHORIZED_APP */\n  , 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(\"unauthorized\"\n  /* UNAUTHORIZED */\n  , \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(\"retry-limit-exceeded\"\n  /* RETRY_LIMIT_EXCEEDED */\n  , 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(\"canceled\"\n  /* CANCELED */\n  , 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(\"invalid-url\"\n  /* INVALID_URL */\n  , \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(\"invalid-default-bucket\"\n  /* INVALID_DEFAULT_BUCKET */\n  , \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(\"no-default-bucket\"\n  /* NO_DEFAULT_BUCKET */\n  , 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(\"cannot-slice-blob\"\n  /* CANNOT_SLICE_BLOB */\n  , 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(\"server-file-wrong-size\"\n  /* SERVER_FILE_WRONG_SIZE */\n  , 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(\"no-download-url\"\n  /* NO_DOWNLOAD_URL */\n  , 'The given file does not have any download URLs.');\n}\n/**\r\n * @internal\r\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(\"invalid-argument\"\n  /* INVALID_ARGUMENT */\n  , message);\n}\n\nfunction appDeleted() {\n  return new StorageError(\"app-deleted\"\n  /* APP_DELETED */\n  , 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(\"invalid-root-operation\"\n  /* INVALID_ROOT_OPERATION */\n  , \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(\"invalid-format\"\n  /* INVALID_FORMAT */\n  , \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(\"internal-error\"\n  /* INTERNAL_ERROR */\n  , 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nvar Location = /*#__PURE__*/function () {\n  function Location(bucket, path) {\n    _classCallCheck(this, Location);\n\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  _createClass(Location, [{\n    key: \"path\",\n    get: function get() {\n      return this.path_;\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.path.length === 0;\n    }\n  }, {\n    key: \"fullServerUrl\",\n    value: function fullServerUrl() {\n      var encode = encodeURIComponent;\n      return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n    }\n  }, {\n    key: \"bucketOnlyServerUrl\",\n    value: function bucketOnlyServerUrl() {\n      var encode = encodeURIComponent;\n      return '/b/' + encode(this.bucket) + '/o';\n    }\n  }], [{\n    key: \"makeFromBucketSpec\",\n    value: function makeFromBucketSpec(bucketString, host) {\n      var bucketLocation;\n\n      try {\n        bucketLocation = Location.makeFromUrl(bucketString, host);\n      } catch (e) {\n        // Not valid URL, use as-is. This lets you put bare bucket names in\n        // config.\n        return new Location(bucketString, '');\n      }\n\n      if (bucketLocation.path === '') {\n        return bucketLocation;\n      } else {\n        throw invalidDefaultBucket(bucketString);\n      }\n    }\n  }, {\n    key: \"makeFromUrl\",\n    value: function makeFromUrl(url, host) {\n      var location = null;\n      var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n      function gsModify(loc) {\n        if (loc.path.charAt(loc.path.length - 1) === '/') {\n          loc.path_ = loc.path_.slice(0, -1);\n        }\n      }\n\n      var gsPath = '(/(.*))?$';\n      var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n      var gsIndices = {\n        bucket: 1,\n        path: 3\n      };\n\n      function httpModify(loc) {\n        loc.path_ = decodeURIComponent(loc.path);\n      }\n\n      var version = 'v[A-Za-z0-9_]+';\n      var firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n      var firebaseStoragePath = '(/([^?#]*).*)?$';\n      var firebaseStorageRegExp = new RegExp(\"^https?://\".concat(firebaseStorageHost, \"/\").concat(version, \"/b/\").concat(bucketDomain, \"/o\").concat(firebaseStoragePath), 'i');\n      var firebaseStorageIndices = {\n        bucket: 1,\n        path: 3\n      };\n      var cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n      var cloudStoragePath = '([^?#]*)';\n      var cloudStorageRegExp = new RegExp(\"^https?://\".concat(cloudStorageHost, \"/\").concat(bucketDomain, \"/\").concat(cloudStoragePath), 'i');\n      var cloudStorageIndices = {\n        bucket: 1,\n        path: 2\n      };\n      var groups = [{\n        regex: gsRegex,\n        indices: gsIndices,\n        postModify: gsModify\n      }, {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      }, {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }];\n\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        var captures = group.regex.exec(url);\n\n        if (captures) {\n          var bucketValue = captures[group.indices.bucket];\n          var pathValue = captures[group.indices.path];\n\n          if (!pathValue) {\n            pathValue = '';\n          }\n\n          location = new Location(bucketValue, pathValue);\n          group.postModify(location);\n          break;\n        }\n      }\n\n      if (location == null) {\n        throw invalidUrl(url);\n      }\n\n      return location;\n    }\n  }]);\n\n  return Location;\n}();\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nvar FailRequest = /*#__PURE__*/function () {\n  function FailRequest(error) {\n    _classCallCheck(this, FailRequest);\n\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  _createClass(FailRequest, [{\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise_;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _appDelete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    }\n  }]);\n\n  return FailRequest;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\n\n\nfunction start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var retryTimeoutId = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var globalTimeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  var triggeredCallback = false;\n\n  function triggerCallback() {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(function () {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call.apply(triggerCallback, [null, success].concat(args));\n      return;\n    }\n\n    var mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call.apply(triggerCallback, [null, success].concat(args));\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    var waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  var stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n    clearGlobalTimeout();\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(\"Invalid value for '\".concat(argument, \"'. Expected \").concat(minValue, \" or greater.\"));\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(\"Invalid value for '\".concat(argument, \"'. Expected \").concat(maxValue, \" or less.\"));\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  var origin = host;\n\n  if (protocol == null) {\n    origin = \"https://\".concat(host);\n  }\n\n  return \"\".concat(protocol, \"://\").concat(origin, \"/v0\").concat(urlPart);\n}\n\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\n\n\nvar NetworkRequest = /*#__PURE__*/function () {\n  function NetworkRequest(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    var _this2 = this;\n\n    _classCallCheck(this, NetworkRequest);\n\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this2.resolve_ = resolve;\n      _this2.reject_ = reject;\n\n      _this2.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  _createClass(NetworkRequest, [{\n    key: \"start_\",\n    value: function start_() {\n      var _this3 = this;\n\n      var doTheRequest = function doTheRequest(backoffCallback, canceled) {\n        if (canceled) {\n          backoffCallback(false, new RequestEndStatus(false, null, true));\n          return;\n        }\n\n        var connection = _this3.connectionFactory_();\n\n        _this3.pendingConnection_ = connection;\n\n        var progressListener = function progressListener(progressEvent) {\n          var loaded = progressEvent.loaded;\n          var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n          if (_this3.progressCallback_ !== null) {\n            _this3.progressCallback_(loaded, total);\n          }\n        };\n\n        if (_this3.progressCallback_ !== null) {\n          connection.addUploadProgressListener(progressListener);\n        } // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n        connection.send(_this3.url_, _this3.method_, _this3.body_, _this3.headers_).then(function () {\n          if (_this3.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n\n          _this3.pendingConnection_ = null;\n          var hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          var status = connection.getStatus();\n\n          if (!hitServer || _this3.isRetryStatusCode_(status)) {\n            var wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n            return;\n          }\n\n          var successCode = _this3.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n      };\n      /**\r\n       * @param requestWentThrough - True if the request eventually went\r\n       *     through, false if it hit the retry limit or was canceled.\r\n       */\n\n\n      var backoffDone = function backoffDone(requestWentThrough, status) {\n        var resolve = _this3.resolve_;\n        var reject = _this3.reject_;\n        var connection = status.connection;\n\n        if (status.wasSuccessCode) {\n          try {\n            var result = _this3.callback_(connection, connection.getResponse());\n\n            if (isJustDef(result)) {\n              resolve(result);\n            } else {\n              resolve();\n            }\n          } catch (e) {\n            reject(e);\n          }\n        } else {\n          if (connection !== null) {\n            var err = unknown();\n            err.serverResponse = connection.getErrorText();\n\n            if (_this3.errorCallback_) {\n              reject(_this3.errorCallback_(connection, err));\n            } else {\n              reject(err);\n            }\n          } else {\n            if (status.canceled) {\n              var _err = _this3.appDelete_ ? appDeleted() : canceled();\n\n              reject(_err);\n            } else {\n              var _err2 = retryLimitExceeded();\n\n              reject(_err2);\n            }\n          }\n        }\n      };\n\n      if (this.canceled_) {\n        backoffDone(false, new RequestEndStatus(false, null, true));\n      } else {\n        this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise_;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(appDelete) {\n      this.canceled_ = true;\n      this.appDelete_ = appDelete || false;\n\n      if (this.backoffId_ !== null) {\n        stop(this.backoffId_);\n      }\n\n      if (this.pendingConnection_ !== null) {\n        this.pendingConnection_.abort();\n      }\n    }\n  }, {\n    key: \"isRetryStatusCode_\",\n    value: function isRetryStatusCode_(status) {\n      // The codes for which to retry came from this page:\n      // https://cloud.google.com/storage/docs/exponential-backoff\n      var isFiveHundredCode = status >= 500 && status < 600;\n      var extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n      408, // Too Many Requests: you're getting rate-limited, basically.\n      429];\n      var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n      var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n      return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n    }\n  }]);\n\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nvar RequestEndStatus = /*#__PURE__*/_createClass(function RequestEndStatus(wasSuccessCode, connection, canceled) {\n  _classCallCheck(this, RequestEndStatus);\n\n  this.wasSuccessCode = wasSuccessCode;\n  this.connection = connection;\n  this.canceled = !!canceled;\n});\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob$1() {\n  var BlobBuilder = getBlobBuilder();\n\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\"unsupported-environment\"\n      /* UNSUPPORTED_ENVIRONMENT */\n      , \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nvar StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nvar StringData = /*#__PURE__*/_createClass(function StringData(data, contentType) {\n  _classCallCheck(this, StringData);\n\n  this.data = data;\n  this.contentType = contentType || null;\n});\n/**\r\n * @internal\r\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  var b = [];\n\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  var decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          var _invalidChar = hasPlus ? '+' : '/';\n\n          throw invalidFormat(format, \"Invalid character '\" + _invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  var array = new Uint8Array(bytes.length);\n\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nvar DataURLParts = /*#__PURE__*/_createClass(function DataURLParts(dataURL) {\n  _classCallCheck(this, DataURLParts);\n\n  this.base64 = false;\n  this.contentType = null;\n  var matches = dataURL.match(/^data:([^,]+)?,/);\n\n  if (matches === null) {\n    throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n  }\n\n  var middle = matches[1] || null;\n\n  if (middle != null) {\n    this.base64 = endsWith(middle, ';base64');\n    this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n  }\n\n  this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n});\n\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nvar FbsBlob = /*#__PURE__*/function () {\n  function FbsBlob(data, elideCopy) {\n    _classCallCheck(this, FbsBlob);\n\n    var size = 0;\n    var blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  _createClass(FbsBlob, [{\n    key: \"size\",\n    value: function size() {\n      return this.size_;\n    }\n  }, {\n    key: \"type\",\n    value: function type() {\n      return this.type_;\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(startByte, endByte) {\n      if (isNativeBlob(this.data_)) {\n        var realBlob = this.data_;\n        var sliced = sliceBlob(realBlob, startByte, endByte);\n\n        if (sliced === null) {\n          return null;\n        }\n\n        return new FbsBlob(sliced);\n      } else {\n        var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n        return new FbsBlob(slice, true);\n      }\n    }\n  }, {\n    key: \"uploadData\",\n    value: function uploadData() {\n      return this.data_;\n    }\n  }], [{\n    key: \"getBlob\",\n    value: function getBlob() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      if (isNativeBlobDefined()) {\n        var blobby = args.map(function (val) {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        });\n        return new FbsBlob(getBlob$1.apply(null, blobby));\n      } else {\n        var uint8Arrays = args.map(function (val) {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return val.data_;\n          }\n        });\n        var finalLength = 0;\n        uint8Arrays.forEach(function (array) {\n          finalLength += array.byteLength;\n        });\n        var merged = new Uint8Array(finalLength);\n        var index = 0;\n        uint8Arrays.forEach(function (array) {\n          for (var i = 0; i < array.length; i++) {\n            merged[index++] = array[i];\n          }\n        });\n        return new FbsBlob(merged, true);\n      }\n    }\n  }]);\n\n  return FbsBlob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  var obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  var index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  var newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nvar Mapping = /*#__PURE__*/_createClass(function Mapping(server, local, writable, xform) {\n  _classCallCheck(this, Mapping);\n\n  this.server = server;\n  this.local = local || server;\n  this.writable = !!writable;\n  this.xform = xform || noXform_;\n});\n\nvar mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  var tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart, host, protocol);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    var _iterator = _createForOfIteratorHelper(resource[PREFIXES_KEY]),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var path = _step.value;\n        var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n        var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n        listResult.prefixes.push(reference);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    var _iterator2 = _createForOfIteratorHelper(resource[ITEMS_KEY]),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n\n        var _reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n        listResult.items.push(_reference);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\n\n\nvar RequestInfo = /*#__PURE__*/_createClass(function RequestInfo(url, method,\n/**\r\n * Returns the value with which to resolve the request's promise. Only called\r\n * if the request is successful. Throw from this function to reject the\r\n * returned Request's promise with the thrown error.\r\n * Note: The XhrIo passed to this function may be reused after this callback\r\n * returns. Do not keep a reference to it in any way.\r\n */\nhandler, timeout) {\n  _classCallCheck(this, RequestInfo);\n\n  this.url = url;\n  this.method = method;\n  this.handler = handler;\n  this.timeout = timeout;\n  this.urlParams = {};\n  this.headers = {};\n  this.body = null;\n  this.errorHandler = null;\n  /**\r\n   * Called with the current number of bytes uploaded and total size (-1 if not\r\n   * computable) of the request body (i.e. used to report upload progress).\r\n   */\n\n  this.progressCallback = null;\n  this.successCodes = [200];\n  this.additionalRetryCodes = [];\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, function (_, data) {\n    return data;\n  }, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = \"bytes=0-\".concat(maxDownloadSizeBytes);\n    requestInfo.successCodes = [200\n    /* OK */\n    , 206\n    /* Partial Content */\n    ];\n  }\n\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    var str = '';\n\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nvar ResumableUploadStatus = /*#__PURE__*/_createClass(function ResumableUploadStatus(current, total, finalized, metadata) {\n  _classCallCheck(this, ResumableUploadStatus);\n\n  this.current = current;\n  this.total = total;\n  this.finalized = !!finalized;\n  this.metadata = metadata || null;\n});\n\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': \"\".concat(blob.size()),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nvar RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': \"\".concat(status_.current)\n  };\n  var body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\n\n\nvar TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\n\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* RUNNING */\n    :\n    case \"pausing\"\n    /* PAUSING */\n    :\n    case \"canceling\"\n    /* CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Observer = /*#__PURE__*/_createClass(function Observer(nextOrObserver, error, complete) {\n  _classCallCheck(this, Observer);\n\n  var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n  if (asFunctions) {\n    this.next = nextOrObserver;\n    this.error = error !== null && error !== void 0 ? error : undefined;\n    this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n  } else {\n    var observer = nextOrObserver;\n    this.next = observer.next;\n    this.error = observer.error;\n    this.complete = observer.complete;\n  }\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return function () {\n    for (var _len5 = arguments.length, argsToForward = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      argsToForward[_key5] = arguments[_key5];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** An override for the text-based Connection. Used in tests. */\n\n\nvar textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\n\nvar XhrConnection = /*#__PURE__*/function () {\n  function XhrConnection() {\n    var _this4 = this;\n\n    _classCallCheck(this, XhrConnection);\n\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this4.xhr_.addEventListener('abort', function () {\n        _this4.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n\n      _this4.xhr_.addEventListener('error', function () {\n        _this4.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n\n      _this4.xhr_.addEventListener('load', function () {\n        resolve();\n      });\n    });\n  }\n\n  _createClass(XhrConnection, [{\n    key: \"send\",\n    value: function send(url, method, body, headers) {\n      if (this.sent_) {\n        throw internalError('cannot .send() more than once');\n      }\n\n      this.sent_ = true;\n      this.xhr_.open(method, url, true);\n\n      if (headers !== undefined) {\n        for (var key in headers) {\n          if (headers.hasOwnProperty(key)) {\n            this.xhr_.setRequestHeader(key, headers[key].toString());\n          }\n        }\n      }\n\n      if (body !== undefined) {\n        this.xhr_.send(body);\n      } else {\n        this.xhr_.send();\n      }\n\n      return this.sendPromise_;\n    }\n  }, {\n    key: \"getErrorCode\",\n    value: function getErrorCode() {\n      if (!this.sent_) {\n        throw internalError('cannot .getErrorCode() before sending');\n      }\n\n      return this.errorCode_;\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      if (!this.sent_) {\n        throw internalError('cannot .getStatus() before sending');\n      }\n\n      try {\n        return this.xhr_.status;\n      } catch (e) {\n        return -1;\n      }\n    }\n  }, {\n    key: \"getResponse\",\n    value: function getResponse() {\n      if (!this.sent_) {\n        throw internalError('cannot .getResponse() before sending');\n      }\n\n      return this.xhr_.response;\n    }\n  }, {\n    key: \"getErrorText\",\n    value: function getErrorText() {\n      if (!this.sent_) {\n        throw internalError('cannot .getErrorText() before sending');\n      }\n\n      return this.xhr_.statusText;\n    }\n    /** Aborts the request. */\n\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.xhr_.abort();\n    }\n  }, {\n    key: \"getResponseHeader\",\n    value: function getResponseHeader(header) {\n      return this.xhr_.getResponseHeader(header);\n    }\n  }, {\n    key: \"addUploadProgressListener\",\n    value: function addUploadProgressListener(listener) {\n      if (this.xhr_.upload != null) {\n        this.xhr_.upload.addEventListener('progress', listener);\n      }\n    }\n  }, {\n    key: \"removeUploadProgressListener\",\n    value: function removeUploadProgressListener(listener) {\n      if (this.xhr_.upload != null) {\n        this.xhr_.upload.removeEventListener('progress', listener);\n      }\n    }\n  }]);\n\n  return XhrConnection;\n}();\n\nvar XhrTextConnection = /*#__PURE__*/function (_XhrConnection) {\n  _inherits(XhrTextConnection, _XhrConnection);\n\n  var _super2 = _createSuper(XhrTextConnection);\n\n  function XhrTextConnection() {\n    _classCallCheck(this, XhrTextConnection);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(XhrTextConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'text';\n    }\n  }]);\n\n  return XhrTextConnection;\n}(XhrConnection);\n\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nvar XhrBytesConnection = /*#__PURE__*/function (_XhrConnection2) {\n  _inherits(XhrBytesConnection, _XhrConnection2);\n\n  var _super3 = _createSuper(XhrBytesConnection);\n\n  function XhrBytesConnection() {\n    _classCallCheck(this, XhrBytesConnection);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(XhrBytesConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'arraybuffer';\n    }\n  }]);\n\n  return XhrBytesConnection;\n}(XhrConnection);\n\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\n\nvar XhrBlobConnection = /*#__PURE__*/function (_XhrConnection3) {\n  _inherits(XhrBlobConnection, _XhrConnection3);\n\n  var _super4 = _createSuper(XhrBlobConnection);\n\n  function XhrBlobConnection() {\n    _classCallCheck(this, XhrBlobConnection);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(XhrBlobConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'blob';\n    }\n  }]);\n\n  return XhrBlobConnection;\n}(XhrConnection);\n\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nvar UploadTask = /*#__PURE__*/function () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob) {\n    var _this5 = this;\n\n    var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, UploadTask);\n\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* RUNNING */\n    ;\n\n    this._errorHandler = function (error) {\n      _this5._request = undefined;\n      _this5._chunkMultiplier = 1;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        _this5._needToFetchStatus = true;\n\n        _this5.completeTransitions_();\n      } else {\n        _this5._error = error;\n\n        _this5._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this5._request = undefined;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        _this5.completeTransitions_();\n      } else {\n        _this5._error = error;\n\n        _this5._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this5._resolve = resolve;\n      _this5._reject = reject;\n\n      _this5._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, function () {});\n  }\n\n  _createClass(UploadTask, [{\n    key: \"_makeProgressCallback\",\n    value: function _makeProgressCallback() {\n      var _this6 = this;\n\n      var sizeBefore = this._transferred;\n      return function (loaded) {\n        return _this6._updateProgress(sizeBefore + loaded);\n      };\n    }\n  }, {\n    key: \"_shouldDoResumable\",\n    value: function _shouldDoResumable(blob) {\n      return blob.size() > 256 * 1024;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      if (this._state !== \"running\"\n      /* RUNNING */\n      ) {\n        // This can happen if someone pauses us in a resume callback, for example.\n        return;\n      }\n\n      if (this._request !== undefined) {\n        return;\n      }\n\n      if (this._resumable) {\n        if (this._uploadUrl === undefined) {\n          this._createResumable();\n        } else {\n          if (this._needToFetchStatus) {\n            this._fetchStatus();\n          } else {\n            if (this._needToFetchMetadata) {\n              // Happens if we miss the metadata on upload completion.\n              this._fetchMetadata();\n            } else {\n              this._continueUpload();\n            }\n          }\n        }\n      } else {\n        this._oneShotUpload();\n      }\n    }\n  }, {\n    key: \"_resolveToken\",\n    value: function _resolveToken(callback) {\n      var _this7 = this;\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            authToken = _ref2[0],\n            appCheckToken = _ref2[1];\n\n        switch (_this7._state) {\n          case \"running\"\n          /* RUNNING */\n          :\n            callback(authToken, appCheckToken);\n            break;\n\n          case \"canceling\"\n          /* CANCELING */\n          :\n            _this7._transition(\"canceled\"\n            /* CANCELED */\n            );\n\n            break;\n\n          case \"pausing\"\n          /* PAUSING */\n          :\n            _this7._transition(\"paused\"\n            /* PAUSED */\n            );\n\n            break;\n        }\n      });\n    } // TODO(andysoto): assert false\n\n  }, {\n    key: \"_createResumable\",\n    value: function _createResumable() {\n      var _this8 = this;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = createResumableUpload(_this8._ref.storage, _this8._ref._location, _this8._mappings, _this8._blob, _this8._metadata);\n\n        var createRequest = _this8._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this8._request = createRequest;\n        createRequest.getPromise().then(function (url) {\n          _this8._request = undefined;\n          _this8._uploadUrl = url;\n          _this8._needToFetchStatus = false;\n\n          _this8.completeTransitions_();\n        }, _this8._errorHandler);\n      });\n    }\n  }, {\n    key: \"_fetchStatus\",\n    value: function _fetchStatus() {\n      var _this9 = this;\n\n      // TODO(andysoto): assert(this.uploadUrl_ !== null);\n      var url = this._uploadUrl;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = getResumableUploadStatus(_this9._ref.storage, _this9._ref._location, url, _this9._blob);\n\n        var statusRequest = _this9._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this9._request = statusRequest;\n        statusRequest.getPromise().then(function (status) {\n          status = status;\n          _this9._request = undefined;\n\n          _this9._updateProgress(status.current);\n\n          _this9._needToFetchStatus = false;\n\n          if (status.finalized) {\n            _this9._needToFetchMetadata = true;\n          }\n\n          _this9.completeTransitions_();\n        }, _this9._errorHandler);\n      });\n    }\n  }, {\n    key: \"_continueUpload\",\n    value: function _continueUpload() {\n      var _this10 = this;\n\n      var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n      var status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n      var url = this._uploadUrl;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo;\n\n        try {\n          requestInfo = continueResumableUpload(_this10._ref._location, _this10._ref.storage, url, _this10._blob, chunkSize, _this10._mappings, status, _this10._makeProgressCallback());\n        } catch (e) {\n          _this10._error = e;\n\n          _this10._transition(\"error\"\n          /* ERROR */\n          );\n\n          return;\n        }\n\n        var uploadRequest = _this10._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this10._request = uploadRequest;\n        uploadRequest.getPromise().then(function (newStatus) {\n          _this10._increaseMultiplier();\n\n          _this10._request = undefined;\n\n          _this10._updateProgress(newStatus.current);\n\n          if (newStatus.finalized) {\n            _this10._metadata = newStatus.metadata;\n\n            _this10._transition(\"success\"\n            /* SUCCESS */\n            );\n          } else {\n            _this10.completeTransitions_();\n          }\n        }, _this10._errorHandler);\n      });\n    }\n  }, {\n    key: \"_increaseMultiplier\",\n    value: function _increaseMultiplier() {\n      var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n      if (currentSize < 32 * 1024 * 1024) {\n        this._chunkMultiplier *= 2;\n      }\n    }\n  }, {\n    key: \"_fetchMetadata\",\n    value: function _fetchMetadata() {\n      var _this11 = this;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = getMetadata$2(_this11._ref.storage, _this11._ref._location, _this11._mappings);\n\n        var metadataRequest = _this11._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this11._request = metadataRequest;\n        metadataRequest.getPromise().then(function (metadata) {\n          _this11._request = undefined;\n          _this11._metadata = metadata;\n\n          _this11._transition(\"success\"\n          /* SUCCESS */\n          );\n        }, _this11._metadataErrorHandler);\n      });\n    }\n  }, {\n    key: \"_oneShotUpload\",\n    value: function _oneShotUpload() {\n      var _this12 = this;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = multipartUpload(_this12._ref.storage, _this12._ref._location, _this12._mappings, _this12._blob, _this12._metadata);\n\n        var multipartRequest = _this12._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this12._request = multipartRequest;\n        multipartRequest.getPromise().then(function (metadata) {\n          _this12._request = undefined;\n          _this12._metadata = metadata;\n\n          _this12._updateProgress(_this12._blob.size());\n\n          _this12._transition(\"success\"\n          /* SUCCESS */\n          );\n        }, _this12._errorHandler);\n      });\n    }\n  }, {\n    key: \"_updateProgress\",\n    value: function _updateProgress(transferred) {\n      var old = this._transferred;\n      this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n      // partial upload not completed by server, after which the \"transferred\"\n      // value may reset to the value at the beginning of the request).\n\n      if (this._transferred !== old) {\n        this._notifyObservers();\n      }\n    }\n  }, {\n    key: \"_transition\",\n    value: function _transition(state) {\n      if (this._state === state) {\n        return;\n      }\n\n      switch (state) {\n        case \"canceling\"\n        /* CANCELING */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING);\n          this._state = state;\n\n          if (this._request !== undefined) {\n            this._request.cancel();\n          }\n\n          break;\n\n        case \"pausing\"\n        /* PAUSING */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING);\n          this._state = state;\n\n          if (this._request !== undefined) {\n            this._request.cancel();\n          }\n\n          break;\n\n        case \"running\"\n        /* RUNNING */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSED ||\n          //        this.state_ === InternalTaskState.PAUSING);\n          var wasPaused = this._state === \"paused\"\n          /* PAUSED */\n          ;\n          this._state = state;\n\n          if (wasPaused) {\n            this._notifyObservers();\n\n            this._start();\n          }\n\n          break;\n\n        case \"paused\"\n        /* PAUSED */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSING);\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n\n        case \"canceled\"\n        /* CANCELED */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSED ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._error = canceled();\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n\n        case \"error\"\n        /* ERROR */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n\n        case \"success\"\n        /* SUCCESS */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n      }\n    }\n  }, {\n    key: \"completeTransitions_\",\n    value: function completeTransitions_() {\n      switch (this._state) {\n        case \"pausing\"\n        /* PAUSING */\n        :\n          this._transition(\"paused\"\n          /* PAUSED */\n          );\n\n          break;\n\n        case \"canceling\"\n        /* CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* CANCELED */\n          );\n\n          break;\n\n        case \"running\"\n        /* RUNNING */\n        :\n          this._start();\n\n          break;\n      }\n    }\n    /**\r\n     * A snapshot of the current task state.\r\n     */\n\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return {\n        bytesTransferred: this._transferred,\n        totalBytes: this._blob.size(),\n        state: externalState,\n        metadata: this._metadata,\n        task: this,\n        ref: this._ref\n      };\n    }\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(type, nextOrObserver, error, completed) {\n      var _this13 = this;\n\n      var observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n      this._addObserver(observer);\n\n      return function () {\n        _this13._removeObserver(observer);\n      };\n    }\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\n\n  }, {\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      // These casts are needed so that TypeScript can infer the types of the\n      // resulting Promise.\n      return this._promise.then(onFulfilled, onRejected);\n    }\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\n\n  }, {\n    key: \"catch\",\n    value: function _catch(onRejected) {\n      return this.then(null, onRejected);\n    }\n    /**\r\n     * Adds the given observer.\r\n     */\n\n  }, {\n    key: \"_addObserver\",\n    value: function _addObserver(observer) {\n      this._observers.push(observer);\n\n      this._notifyObserver(observer);\n    }\n    /**\r\n     * Removes the given observer.\r\n     */\n\n  }, {\n    key: \"_removeObserver\",\n    value: function _removeObserver(observer) {\n      var i = this._observers.indexOf(observer);\n\n      if (i !== -1) {\n        this._observers.splice(i, 1);\n      }\n    }\n  }, {\n    key: \"_notifyObservers\",\n    value: function _notifyObservers() {\n      var _this14 = this;\n\n      this._finishPromise();\n\n      var observers = this._observers.slice();\n\n      observers.forEach(function (observer) {\n        _this14._notifyObserver(observer);\n      });\n    }\n  }, {\n    key: \"_finishPromise\",\n    value: function _finishPromise() {\n      if (this._resolve !== undefined) {\n        var triggered = true;\n\n        switch (taskStateFromInternalTaskState(this._state)) {\n          case TaskState.SUCCESS:\n            async(this._resolve.bind(null, this.snapshot))();\n            break;\n\n          case TaskState.CANCELED:\n          case TaskState.ERROR:\n            var toCall = this._reject;\n            async(toCall.bind(null, this._error))();\n            break;\n\n          default:\n            triggered = false;\n            break;\n        }\n\n        if (triggered) {\n          this._resolve = undefined;\n          this._reject = undefined;\n        }\n      }\n    }\n  }, {\n    key: \"_notifyObserver\",\n    value: function _notifyObserver(observer) {\n      var externalState = taskStateFromInternalTaskState(this._state);\n\n      switch (externalState) {\n        case TaskState.RUNNING:\n        case TaskState.PAUSED:\n          if (observer.next) {\n            async(observer.next.bind(observer, this.snapshot))();\n          }\n\n          break;\n\n        case TaskState.SUCCESS:\n          if (observer.complete) {\n            async(observer.complete.bind(observer))();\n          }\n\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          if (observer.error) {\n            async(observer.error.bind(observer, this._error))();\n          }\n\n          break;\n\n        default:\n          // TODO(andysoto): assert(false);\n          if (observer.error) {\n            async(observer.error.bind(observer, this._error))();\n          }\n\n      }\n    }\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      var valid = this._state === \"paused\"\n      /* PAUSED */\n      || this._state === \"pausing\"\n      /* PAUSING */\n      ;\n\n      if (valid) {\n        this._transition(\"running\"\n        /* RUNNING */\n        );\n      }\n\n      return valid;\n    }\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var valid = this._state === \"running\"\n      /* RUNNING */\n      ;\n\n      if (valid) {\n        this._transition(\"pausing\"\n        /* PAUSING */\n        );\n      }\n\n      return valid;\n    }\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var valid = this._state === \"running\"\n      /* RUNNING */\n      || this._state === \"pausing\"\n      /* PAUSING */\n      ;\n\n      if (valid) {\n        this._transition(\"canceling\"\n        /* CANCELING */\n        );\n      }\n\n      return valid;\n    }\n  }]);\n\n  return UploadTask;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nvar Reference = /*#__PURE__*/function () {\n  function Reference(_service, location) {\n    _classCallCheck(this, Reference);\n\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  _createClass(Reference, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'gs://' + this._location.bucket + '/' + this._location.path;\n    }\n  }, {\n    key: \"_newRef\",\n    value: function _newRef(service, location) {\n      return new Reference(service, location);\n    }\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\n\n  }, {\n    key: \"root\",\n    get: function get() {\n      var location = new Location(this._location.bucket, '');\n      return this._newRef(this._service, location);\n    }\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\n\n  }, {\n    key: \"bucket\",\n    get: function get() {\n      return this._location.bucket;\n    }\n    /**\r\n     * The full path of this object.\r\n     */\n\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this._location.path;\n    }\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return lastComponent(this._location.path);\n    }\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\n\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return this._service;\n    }\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var newPath = parent(this._location.path);\n\n      if (newPath === null) {\n        return null;\n      }\n\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    }\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\n\n  }, {\n    key: \"_throwIfRoot\",\n    value: function _throwIfRoot(name) {\n      if (this._location.path === '') {\n        throw invalidRootOperation(name);\n      }\n    }\n  }]);\n\n  return Reference;\n}();\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\n\n\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n\n  var requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(function (bytes) {\n    return maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n    bytes.slice(0, maxDownloadSizeBytes) : bytes;\n  });\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\n\n\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n\n  var requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(function (blob) {\n    return maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n    blob.slice(0, maxDownloadSizeBytes) : blob;\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  var requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(function (finalMetadata) {\n    return {\n      metadata: finalMetadata,\n      ref: ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString$1(ref, value) {\n  var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : StringFormat.RAW;\n  var metadata = arguments.length > 3 ? arguments[3] : undefined;\n\n  ref._throwIfRoot('uploadString');\n\n  var data = dataFromString(format, value);\n  var metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(ref, accumulator, pageToken) {\n    var _accumulator$prefixes, _accumulator$items;\n\n    var opt, nextPage;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            opt = {\n              // maxResults is 1000 by default.\n              pageToken: pageToken\n            };\n            _context4.next = 3;\n            return list$1(ref, opt);\n\n          case 3:\n            nextPage = _context4.sent;\n\n            (_accumulator$prefixes = accumulator.prefixes).push.apply(_accumulator$prefixes, _toConsumableArray(nextPage.prefixes));\n\n            (_accumulator$items = accumulator.items).push.apply(_accumulator$items, _toConsumableArray(nextPage.items));\n\n            if (!(nextPage.nextPageToken != null)) {\n              _context4.next = 9;\n              break;\n            }\n\n            _context4.next = 9;\n            return listAllHelper(ref, accumulator, nextPage.nextPageToken);\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _listAllHelper.apply(this, arguments);\n}\n\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults',\n      /* minValue= */\n      1,\n      /* maxValue= */\n      1000, options.maxResults);\n    }\n  }\n\n  var op = options || {};\n  var requestInfo = list$2(ref.storage, ref._location,\n  /*delimiter= */\n  '/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n\n  var requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n\n  var requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n\n  var requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(function (url) {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n\n  var requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    var service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    var reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  storage.host = \"\".concat(host, \":\").concat(port);\n  storage._protocol = 'http';\n  var mockUserToken = options.mockUserToken;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\n\n\nvar FirebaseStorageImpl = /*#__PURE__*/function () {\n  function FirebaseStorageImpl(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    _classCallCheck(this, FirebaseStorageImpl);\n\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n\n\n  _createClass(FirebaseStorageImpl, [{\n    key: \"host\",\n    get: function get() {\n      return this._host;\n    },\n    set: function set(host) {\n      this._host = host;\n\n      if (this._url != null) {\n        this._bucket = Location.makeFromBucketSpec(this._url, host);\n      } else {\n        this._bucket = extractBucket(host, this.app.options);\n      }\n    }\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\n\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._maxUploadRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    }\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\n\n  }, {\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._maxOperationRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    }\n  }, {\n    key: \"_getAuthToken\",\n    value: function () {\n      var _getAuthToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var auth, tokenData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._overrideAuthToken) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._overrideAuthToken);\n\n              case 2:\n                auth = this._authProvider.getImmediate({\n                  optional: true\n                });\n\n                if (!auth) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return auth.getToken();\n\n              case 6:\n                tokenData = _context.sent;\n\n                if (!(tokenData !== null)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", tokenData.accessToken);\n\n              case 9:\n                return _context.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _getAuthToken() {\n        return _getAuthToken2.apply(this, arguments);\n      }\n\n      return _getAuthToken;\n    }()\n  }, {\n    key: \"_getAppCheckToken\",\n    value: function () {\n      var _getAppCheckToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var appCheck, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                appCheck = this._appCheckProvider.getImmediate({\n                  optional: true\n                });\n\n                if (!appCheck) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 4;\n                return appCheck.getToken();\n\n              case 4:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result.token);\n\n              case 6:\n                return _context2.abrupt(\"return\", null);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _getAppCheckToken() {\n        return _getAppCheckToken2.apply(this, arguments);\n      }\n\n      return _getAppCheckToken;\n    }()\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\n\n  }, {\n    key: \"_delete\",\n    value: function _delete() {\n      if (!this._deleted) {\n        this._deleted = true;\n\n        this._requests.forEach(function (request) {\n          return request.cancel();\n        });\n\n        this._requests.clear();\n      }\n\n      return Promise.resolve();\n    }\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\n\n  }, {\n    key: \"_makeStorageReference\",\n    value: function _makeStorageReference(loc) {\n      return new Reference(this, loc);\n    }\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\n\n  }, {\n    key: \"_makeRequest\",\n    value: function _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n      var _this15 = this;\n\n      if (!this._deleted) {\n        var request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\n\n        this._requests.add(request); // Request removes itself from set when complete.\n\n\n        request.getPromise().then(function () {\n          return _this15._requests.delete(request);\n        }, function () {\n          return _this15._requests.delete(request);\n        });\n        return request;\n      } else {\n        return new FailRequest(appDeleted());\n      }\n    }\n  }, {\n    key: \"makeRequestWithTokens\",\n    value: function () {\n      var _makeRequestWithTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(requestInfo, requestFactory) {\n        var _yield$Promise$all, _yield$Promise$all2, authToken, appCheckToken;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n\n              case 2:\n                _yield$Promise$all = _context3.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                authToken = _yield$Promise$all2[0];\n                appCheckToken = _yield$Promise$all2[1];\n                return _context3.abrupt(\"return\", this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise());\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function makeRequestWithTokens(_x4, _x5) {\n        return _makeRequestWithTokens.apply(this, arguments);\n      }\n\n      return makeRequestWithTokens;\n    }()\n  }]);\n\n  return FirebaseStorageImpl;\n}();\n\nvar name = \"@firebase/storage\";\nvar version = \"0.9.6\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\n\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\n\n\nfunction getStorage() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var bucketUrl = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  var storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  var storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\n\n\nfunction connectStorageEmulator(storage, host, port) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\n\n\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\n\n\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nfunction factory(container, _ref3) {\n  var url = _ref3.instanceIdentifier;\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  var appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true)); //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n\n\n  registerVersion(name, version, ''); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterStorage();\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","code","message","prependCode","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","customData","FirebaseError","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","path_","length","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","_appDelete","start","f","callback","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","pendingConnection_","progressListener","loaded","progressEvent","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","status","getStatus","isRetryStatusCode_","wasCanceled","ABORT","successCode","indexOf","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete_","canceled_","backoffId_","appDelete","abort","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","additionalRetryCodes","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","getBlob","bb","append","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","list","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","getBytes","maxDownloadSizeBytes","_","getDownloadUrl","updateMetadata","deleteObject","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","textFactoryOverride","XhrConnection","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","sent_","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_codeEquals","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","_resolve","_reject","_start","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","all","storage","_getAuthToken","_getAppCheckToken","_resolveToken","_location","createRequest","_makeRequest","getPromise","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","snapshot","toCall","Reference","_service","_newRef","getBytesInternal","_throwIfRoot","makeRequestWithTokens","getBlobInternal","uploadBytes","finalMetadata","uploadBytesResumable","uploadString","listAll","accumulator","listAllHelper","opt","nextPage","options","op","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","requestsDeleteObject","_getChild","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","_host","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","appCheck","_deleted","request","clear","_appId","add","delete","STORAGE_TYPE","getModularInstance","uploadBytesInternal","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","connectEmulatorInternal","getStream","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","setMultipleInstances","registerVersion"],"sources":["/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/constants.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/error.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/location.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/failrequest.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/backoff.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/type.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/url.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/connection.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/request.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/fs.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/platform/browser/base64.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/string.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/blob.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/json.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/path.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/metadata.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/list.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/requestinfo.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/requests.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/taskenums.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/observer.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/implementation/async.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/platform/browser/connection.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/task.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/reference.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/service.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/constants.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/api.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/api.browser.ts","/Users/jatingoyal/Desktop/coding/react/hotstar-clone/node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"]},"metadata":{},"sourceType":"module"}